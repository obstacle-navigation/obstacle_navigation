/* Auto-generated by genmsg_cpp for file /nishome/eysalee/ros/rosbuild_ws/class-code/obstacle_navigation/msg/Blobs.msg */
#ifndef OBSTACLE_NAVIGATION_MESSAGE_BLOBS_H
#define OBSTACLE_NAVIGATION_MESSAGE_BLOBS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "obstacle_navigation/Blob.h"

namespace obstacle_navigation
{
template <class ContainerAllocator>
struct Blobs_ {
  typedef Blobs_<ContainerAllocator> Type;

  Blobs_()
  : header()
  , image_width(0)
  , image_height(0)
  , blob_count(0)
  , blobs()
  {
  }

  Blobs_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , image_width(0)
  , image_height(0)
  , blob_count(0)
  , blobs(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _image_width_type;
  uint32_t image_width;

  typedef uint32_t _image_height_type;
  uint32_t image_height;

  typedef uint32_t _blob_count_type;
  uint32_t blob_count;

  typedef std::vector< ::obstacle_navigation::Blob_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::obstacle_navigation::Blob_<ContainerAllocator> >::other >  _blobs_type;
  std::vector< ::obstacle_navigation::Blob_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::obstacle_navigation::Blob_<ContainerAllocator> >::other >  blobs;


  typedef boost::shared_ptr< ::obstacle_navigation::Blobs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_navigation::Blobs_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Blobs
typedef  ::obstacle_navigation::Blobs_<std::allocator<void> > Blobs;

typedef boost::shared_ptr< ::obstacle_navigation::Blobs> BlobsPtr;
typedef boost::shared_ptr< ::obstacle_navigation::Blobs const> BlobsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::obstacle_navigation::Blobs_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::obstacle_navigation::Blobs_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace obstacle_navigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::obstacle_navigation::Blobs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::obstacle_navigation::Blobs_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::obstacle_navigation::Blobs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c71fcb3e322bfd46419c79b24d780f3";
  }

  static const char* value(const  ::obstacle_navigation::Blobs_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c71fcb3e322bfd4ULL;
  static const uint64_t static_value2 = 0x6419c79b24d780f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_navigation::Blobs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "obstacle_navigation/Blobs";
  }

  static const char* value(const  ::obstacle_navigation::Blobs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::obstacle_navigation::Blobs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint32 image_width\n\
uint32 image_height\n\
uint32 blob_count\n\
Blob[] blobs\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: obstacle_navigation/Blob\n\
float32 mindepth\n\
float32 maxdepth\n\
uint32 area\n\
uint32 x\n\
uint32 y\n\
uint32 left\n\
uint32 right\n\
uint32 top\n\
uint32 bottom\n\
\n\
";
  }

  static const char* value(const  ::obstacle_navigation::Blobs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::obstacle_navigation::Blobs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::obstacle_navigation::Blobs_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::obstacle_navigation::Blobs_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.image_width);
    stream.next(m.image_height);
    stream.next(m.blob_count);
    stream.next(m.blobs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Blobs_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_navigation::Blobs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::obstacle_navigation::Blobs_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "blob_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.blob_count);
    s << indent << "blobs[]" << std::endl;
    for (size_t i = 0; i < v.blobs.size(); ++i)
    {
      s << indent << "  blobs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::obstacle_navigation::Blob_<ContainerAllocator> >::stream(s, indent + "    ", v.blobs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_NAVIGATION_MESSAGE_BLOBS_H

